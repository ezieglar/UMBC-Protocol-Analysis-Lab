(herald "Session Binding Protocol with TLS 1.2 (proxy and server separate as in paper description (TLS connection from proxy to server), server on a private network)."
	(bound 12)
	)

(include "tls_1.2_macros.lisp") ; 4 message exchange by combining TLS messages.

;; The following two macros are only shortcuts to the TLS macros that generate
;; the write keys for a TLS session. The are only used to reduce the number of
;; characters that must be typed each time the a key is used.

(defmacro (cwk pre_master_secret client_random server_random)
  (ClientWriteKey (MasterSecret pre_master_secret client_random server_random)))

(defmacro (swk pre_master_secret client_random server_random)
  (ServerWriteKey (MasterSecret pre_master_secret client_random server_random)))

(defprotocol ca basic

  ;; This protocol is basic cookie authentication of requests. Once a user logs
  ;; in with their username and password, the server provides an authentication
  ;; cookie to the client that the client can provide to authenticate requests
  ;; to the server without the need to authenticate again with the username
  ;; and password.

  (defrole clienta ;; Role in which the client authenticates with password
    (vars
     (u s ca name) ;; u - username, s - server, ca - certificate authority
     (cr sr random32) ;; cr - client random, sr - server random for TLS
     (pms random48) ;; pms - premaster secret generated by client for TLS
     (p password) ;; user's password
     (cookie mesg) ;; authentication cookie provided by the server
     (any mesg)
     (cookiestor locn) ;; client storage of authentication cookie
     (request httpreq)
     (response httpdata)
     )
    (trace
     (TLS send recv pms cr sr s ca) ;; establish TLS session with server
     (send (enc "login" u p (cwk pms cr sr)))
     (recv (enc "login-successful" cookie (swk pms cr sr)))
     (load cookiestor any)            ;; store authentication cookie associated
     (stor cookiestor (cat "client store" u s cookie)) ;; with the server s
     (send (enc cookie request (cwk pms cr sr)))
     (recv (enc response (swk pms cr sr)))
     )
    )

  (defrole clientr ;; Role where client makes requests, but already has an
                   ;; authentication cookie (does not need to authenticate)
    
    (vars
     (u s ca name) ;; u - username, s - server, ca - certificate authority
     (cr sr random32) ;; cr - client random, sr - server random for TLS
     (pms random48) ;; pms - premaster secret generated by client for TLS
     (p password) ;; user's password
     (cookie mesg) ;; authentication cookie provided by the server
     (cookiestor locn) ;; client storage of authentication cookie
     (request httpreq)
     (response httpdata)
     )
    (trace
     (TLS send recv pms cr sr s ca) ;; establish TLS session with server
     (load cookiestor (cat "client store" u s cookie));; retrieve authentication
                                                      ;; cookie associated
                                                      ;; with the server s
     (send (enc cookie request (cwk pms cr sr)))
     (recv (enc response (swk pms cr sr)))
     )
    (gen-st (cat "client store" u s cookie))
    )

  (defrole proxy ;; Role where proxy authenticates and takes requests within the
                 ;; same TLS session.
    (vars
     (u prxy s ca name) ;; prxy - proxy, others as described above
     (cr sr pr1 pr2 random32) ;; pr1 and pr2 are proxy randoms for the 2 TLS
                            ;; sessions, one to the client and one to the server
     (pms ppms random48) ;; premaster secrets generated by client and proxy
     (p password) ;; user's password
     (cookie data) ;; authentication cookie provided by the server
     (ppk skey) ;; proxy private key
     (request httpreq)
     (response httpdata)
     (ln chan) ;; local area network where the server resides
     )
    (trace
     (TLS recv send pms cr pr1 prxy ca) ;; TLS connection to client
     (recv (enc "login" u p (cwk pms cr pr1)))
     (TLSprvt send recv ln ppms pr2 sr s ca) ;; TLS connection to server on
                                             ;; private network
     (send ln (enc "login" u p (cwk ppms pr2 sr)))
     (recv ln (enc "login-successful" cookie (swk ppms pr2 sr)))
     (send (enc "login-successful"
		(enc cookie (hash ppk (MasterSecret pms cr pr1)));; bound cookie
		(swk pms cr pr1)))
     (recv (enc (enc cookie (hash ppk (MasterSecret pms cr pr1))) request
		(cwk pms cr pr1)))
     (send ln (enc cookie request (cwk ppms pr2 sr)))
     (recv ln (enc response (swk ppms pr2 sr)))
     (send (enc response (swk pms cr pr1)))
     )
;;    (conf ln) ;; confidential local area network
    (non-orig (privk s) ppk) ;; assumptions of a trusted proxy
    (uniq-orig pr1 pr2 ppms) ;; assumptions of a trusted proxy
    (facts (neq s prxy))
    )
     
  (defrole prxyr ;; Role where proxy takes requests in a TLS session

    (vars
     (u prxy s ca name) ;; prxy - proxy, others as described above
     (cr sr pr1 pr2 random32) ;; pr1 and pr2 are proxy randoms for the 2 TLS
                            ;; sessions, one to the client and one to the server
     (pms ppms random48) ;; premaster secrets generated by client and proxy
     (cookie data) ;; authentication cookie provided by the server
     (ppk skey) ;; proxy private key
     (request httpreq)
     (response httpdata)
     (ln chan) ;; local area network where the server resides
     )
    (trace
     (TLS recv send pms cr pr1 prxy ca) ;; TLS connection to client
     (recv (enc (enc cookie (hash ppk (MasterSecret pms cr pr1))) request
		(cwk pms cr pr1)))
     (TLSprvt send recv ln ppms pr2 sr s ca) ;; TLS connection to server on
                                             ;; private network
     (send ln (enc cookie request (cwk ppms pr2 sr)))
     (recv ln (enc response (swk ppms pr2 sr)))
     (send (enc response (swk pms cr pr1)))
     )
;;    (conf ln) ;; confidential local area network
    (non-orig (privk s) ppk) ;; assumptions of a trusted proxy
    (uniq-orig pr1 pr2 ppms) ;; assumptions of a trusted proxy
    (facts (neq s prxy))
    )
     
  (defrole servera ;; Role where server authenticates user with password and
                   ;; creates authentication cookie used to authenticate
                   ;; requests. This role differs from the same role in ca.scm
                   ;; as it has been modified to transform the cookie created by
                   ;; the server by encrypting the cookie with a key derived 
                   ;; from the TLS master secret and a secret proxy key. The 
                   ;; client receives the transformed cookie.
    
    (vars
     (u s ca name) ;; u - username, s - server, ca - certificate authority
     (cr sr random32) ;; cr - client random, sr - server random for TLS
     (pms random48) ;; pms - premaster secret generated by client for TLS
     (p password) ;; user's password
     (cookie data) ;; authentication cookie provided by the server
     (any mesg)
     (authstor locn) ;; server storage of clients authentication cookie
     (request httpreq)
     (response httpdata)
     (ln chan) ;; local area network
     )
    (trace
     (TLSprvt recv send ln pms cr sr s ca) ;; establish TLS session with proxy
     (recv ln (enc "login" u p (cwk pms cr sr)))
     (send ln (enc "login-successful" cookie (swk pms cr sr)))
     (load authstor any)                             ;; store authentication 
     (stor authstor (cat "server store" s u cookie)) ;; cookie associated with u
     (recv ln (enc cookie request (cwk pms cr sr)))
     (send ln (enc response (swk pms cr sr)))
     )
    (facts (neq u s))
;;    (conf ln)
    (uniq-orig cookie) ;; The unique origination assumption for the cookie is
    ;; included in the role where it is generated to illustrate cookie stealing.
    ;; If the cookie is not uniquely generated, the results are uninteresting
    ;; as the cookie is potentially known to everyone, so it is not tied to any
    ;; authentication.
    (uniq-orig sr) ;; added to restrict multiple TLS variations of the server
                   ;; session establishment if the server reuses sr
    )

  (defrole serverr ;; Role where server responds to user requests authenticated
                   ;; with an authentication cookie
    (vars
     (u s ca name) ;; u - username, s - server, ca - certificate authority
     (cr sr random32) ;; cr - client random, sr - server random for TLS
     (pms random48) ;; pms - premaster secret generated by client for TLS
     (p password) ;; user's password
     (cookie data) ;; authentication cookie provided by the server
     (any mesg)
     (authstor locn) ;; server storage of clients authentication cookie
     (request httpreq)
     (response httpdata)
     (ln chan)
     )
    (trace
     (TLSprvt recv send ln pms cr sr s ca) ;; establish TLS session with client
     (recv ln (enc cookie request (cwk pms cr sr)))
     (load authstor (cat "server store" s u cookie)) ;; retrieve user cookie
     (send ln (enc response (swk pms cr sr)))
     )
;;    (conf ln)
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie))
    )

  (lang
   (random32 atom)
   (random48 atom)
   (password atom)
   (httpreq atom)
   (httpdata atom)
   )
  )

;; The following skeleton checks the case where the client authenticates,
;; receives the authentication cookie, and makes the cookie authenticated
;; request over the same TLS connection. Given that the client authenticates
;; the server, the entire process is secure from the client's perspective. The
;; client has authenticated the server and all communication is within the
;; authenticated confidential channel created by TLS. The authentication cookie
;; isn't stolen, nor does it leak from the TLS channel.

(defskeleton ca
  (vars (u s ca name) (p password) (cr sr random32) (pms random48))
  (defstrandmax clienta (u u) (p p) (s s) (ca ca) (cr cr) (sr sr) (pms pms))
  (pen-non-orig p)
  (non-orig (privk ca) (privk s))
  (uniq-orig cr pms)
  (uniq-orig sr) ;; This is only included to prevent multiple runs of the same
  ;; server interacting with the same client.
  )

;; Test that the cookie isn't available outside of the TLS channel when it is
;; provided in response to a username and password authentication. The cookie
;; is not available outside of the original TLS channel, as the client's cookie
;; is tied to the original TLS session where it was created. This is a dead
;; skeleton since the server cannot correctly decrypt the cookie as the TLS
;; parameters have changed. This skeleton demonstrates that the approach of
;; binding the cookie to the TLS channel prevents the cookie stealing attack,
;; as the same skeleton in ca.scm model produced a shape in which the cookie
;; was leaked.

(defskeleton ca
  (vars (u s ca name) (p password) (cr sr random32) (pms random48)
	(cookie data))
  (defstrandmax clienta (u u) (p p) (s s) (ca ca) (cr cr) (sr sr) (pms pms)
    (cookie cookie))
  (deflistener cookie)
  (pen-non-orig p)
  (non-orig (privk ca) (privk s))
  (uniq-orig cr pms)
  (uniq-orig sr) ;; This is only included to prevent multiple runs of the same
  ;; server interacting with the same client.
  )

;; Test of a client making a request over a new TLS connection using the cookie
;; for authentication. With the binding of a cookie to the TLS session in which
;; the cookie was created, the skeleton is dead because the cookie created by 
;; the server cannot be decrypted from the value received from the client as
;; the TLS master secret used in the key is different. This demonstrates that
;; binding the cookie to the TLS session prevents cookie stealing.

(defskeleton ca
  (vars (s ca name) (cr sr random32) (pms random48))
  (defstrandmax clientr (s s) (ca ca) (cr cr) (sr sr) (pms pms))
  (non-orig (privk ca) (privk s))
  (uniq-orig cr pms)
  (uniq-orig sr) ;; This is only included to prevent multiple runs of the same
  ;; server interacting with the same client.
  )

;; Test of the server. 

(defskeleton ca
  (vars (u s ca name) (sr random32) (p password))
  (defstrand servera 9 (u u) (s s) (ca ca) (sr sr) (p p))
  (pen-non-orig p)
  (non-orig (privk ca) (privk s))
  (uniq-orig sr))

(defskeleton ca
  (vars (u s ca name) (sr random32))
  (defstrand serverr 7 (u u) (s s) (ca ca) (sr sr))
  (non-orig (privk ca) (privk s))
  (uniq-orig sr))

;; Cookie Stealing Prevention Theorems

(defgoal ca
  (forall
    ((any mesg) (cookie data) (response httpdata) (request httpreq)
      (p password) (cr sr random32) (pms random48) (u s ca name)
      (cookiestor locn) (z z-0 strd))
    (implies
      (and (p "clienta" z 10) (p "" z-0 2) (p "clienta" "any" z any)
        (p "clienta" "cookie" z cookie)
        (p "clienta" "response" z response)
        (p "clienta" "request" z request) (p "clienta" "p" z p)
        (p "clienta" "cr" z cr) (p "clienta" "sr" z sr)
        (p "clienta" "pms" z pms) (p "clienta" "u" z u)
        (p "clienta" "s" z s) (p "clienta" "ca" z ca)
        (p "clienta" "cookiestor" z cookiestor) (p "" "x" z-0 cookie)
        (non (privk s)) (non (privk ca)) (pnon p) (uniq sr)
        (uniq-at cr z 0) (uniq-at pms z 2))
      (false))))

(defgoal ca
  (forall
   ((z strd) (cookie data) (u s ca name) (cr sr random32) (pms random48))
   (implies
    (and
     (p "clientr" z 7)
     (p "clientr" "cookie" z cookie)
     (p "clientr" "u" z u)
     (p "clientr" "s" z s)
     (p "clientr" "ca" z ca)
     (p "clientr" "cr" z cr)
     (p "clientr" "sr" z sr)
     (p "clientr" "pms" z pms)
     (non (privk ca))
     (non (privk s))
     (uniq sr)
     (uniq-at cr z 0)
     (uniq-at pms z 2))
    (exists
     ((z0 strd))
     (and
      (p "servera" z0 8)
      (p "servera" "cookie" z0 cookie)
      (p "servera" "u" z0 u)
      (p "servera" "s" z0 s)
      (uniq-at cookie z0 5)
      (fact neq u s))))))
	    
(defgoal ca
  (forall
   ((z strd) (cookie data) (u prxy ca name) (cr sr random32) (pms random48)
    (ppk skey))
   (implies
    (and
     (p "clienta" z 10)
     (p "clienta" "cookie" z (enc cookie (hash ppk (hash pms cr sr))))
     (p "clienta" "u" z u)
     (p "clienta" "s" z prxy)
     (p "clienta" "ca" z ca)
     (p "clienta" "cr" z cr)
     (p "clienta" "sr" z sr)
     (p "clienta" "pms" z pms)
     (non (privk ca))
     (non (privk prxy))
     (non ppk)
     (uniq sr)
     (uniq-at cr z 0)
     (uniq-at pms z 2))
    (exists
     ((z0 strd) (s name))
     (and
      (p "servera" z0 10)
      (p "servera" "cookie" z0 cookie)
      (p "servera" "u" z0 u)
      (p "servera" "s" z0 s)
      (uniq-at cookie z0 5)
      (fact neq u s))))))
	    
